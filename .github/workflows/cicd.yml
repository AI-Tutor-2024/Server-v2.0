name: CI/CD using github actions & docker

# event trigger
on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
      # open jdk 17 버전 환경을 세팅
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      #Set up Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Github Submodule에서 환경변수 가져오기
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{secrets.CONFIG_TOKEN}}
          submodules: true

      # 서브모듈 업데이트 (초기화)
      - name: Update Git Submodules
        run: |
          git submodule update --init --recursive
          ls -al Server-v2.0-Config/yml 

      # Gradle 빌드 전에, application.yml 존재 여부 확인
      - name: Check application.yml exists
        run: |
          if [ -f "Server-v2.0-Config/yml/application.yml" ]; then
            echo "application.yml exists"
          else
            echo "application.yml NOT FOUND"
            exit 1
          fi

      # 프로젝트 메타정보 추출해서 Docker image에 태그 생성
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{secrets.DOCKER_USERNAME}}/daily-pay
          # 가장 최신 image 에 latest tag 달기
          flavor: |
            latest=true
          # Git short commit, use git version tag
          tags: |
            type=semver,pattern={{version}}

      # gradle build
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # DockerHub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      # Docker image Build해서 DockerHub에 Push
      - name: Docker build and push
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      # EC2 서버에 배포
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.SSH_KNOWN_HOSTS }} # EC2 퍼블릭 IPv4 DNS
          username: ${{secrets.SSH_USER}}
          key: ${{ secrets.SSH_PEM_KEY }}
          envs: GITHUB_SHA
          # 주의 : 실행중인 컨테이너 전부 종료
          script: |
            sudo docker stop $(sudo docker ps -a -q)
            sudo docker pull ${{secrets.DOCKER_USERNAME}}/daily-pay
            sudo docker run -d -p 80:8080 ${{secrets.DOCKER_USERNAME}}/daily-pay
            sudo docker image prune -f
